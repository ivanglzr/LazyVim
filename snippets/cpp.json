{
  "Competitive Programming": {
    "prefix": "cp",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "#define int long long int",
      "#define ld long double",
      "#define MOD 1000000007",
      "#define INF 1000000000",
      "#define endl \"\\n\"",
      "#define pii pair<int, int>",
      "#define x first",
      "#define y second",
      "#define memo(arr, val) memset(arr, val, sizeof(arr))",
      "#define all(x) x.begin(), x.end()",
      "#define rall(x) x.rbegin(), x.rend()",
      "#define pb push_back",
      "#define Yes cout << \"YES\" << endl",
      "#define No cout << \"NO\" << endl",
      "",
      "signed main() {",
      "  ios::sync_with_stdio(false);",
      "  cin.tie(nullptr);",
      "",
      "  $0",
      "",
      "  return 0;",
      "}"
    ],
    "description": "Basic Template for CP"
  },
  "Competitive Programming MultiTestcase": {
    "prefix": "cptc",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "#define int long long int",
      "#define ld long double",
      "#define MOD 1000000007",
      "#define INF 1000000000",
      "#define endl \"\\n\"",
      "#define pii pair<int, int>",
      "#define x first",
      "#define y second",
      "#define memo(arr, val) memset(arr, val, sizeof(arr))",
      "#define all(x) x.begin(), x.end()",
      "#define rall(x) x.rbegin(), x.rend()",
      "#define pb push_back",
      "#define Yes cout << \"YES\" << endl",
      "#define No cout << \"NO\" << endl",
      "",
      "void solve() {",
      "  $0",
      "}",
      "",
      "signed main() {",
      "  ios::sync_with_stdio(false);",
      "  cin.tie(nullptr);",
      "",
      "  int tc;",
      "  cin >> tc;",
      "",
      "  while (tc--)",
      "    solve();",
      "",
      "  return 0;",
      "}"
    ],
    "description": "MultiTestcase Template for CP"
  },
  "Log 2 Ceil": {
    "prefix": "log2ceil",
    "body": [
      "int log2ceil(int x) {",
      "  int cnt = 0;",
      "",
      "  while (x) {",
      "    x >>= 1;",
      "    cnt++;",
      "  }",
      "",
      "  return cnt;",
      "}"
    ],
    "description": "Log 2 Ceil function"
  },
  "Log 2 Floor": {
    "prefix": "log2floor",
    "body": [
      "int log2floor(int x) {",
      "  int cnt = 0;",
      "",
      "  while (x > 1) {",
      "    x >>= 1;",
      "    cnt++;",
      "  }",
      "",
      "  return cnt;",
      "}"
    ],
    "description": "Log 2 Ceil function"
  },
  "Segment Tree Template": {
    "prefix": "segt",
    "body": [
      "class SegmentTree {",
      "    int n;",
      "    vector<int> tree;",
      "",
      "private:",
      "    int combine(int a, int b) {",
      "        return a + b;",
      "    }",
      "",
      "    int identity() {",
      "        return 0;",
      "    }",
      "",
      "    void build(const vector<int>& a, int v, int tl, int tr) {",
      "        if (tl == tr) {",
      "            tree[v] = a[tl];",
      "        } else {",
      "            int tm = (tl + tr) / 2;",
      "            build(a, v * 2, tl, tm);",
      "            build(a, v * 2 + 1, tm + 1, tr);",
      "            tree[v] = combine(tree[v * 2], tree[v * 2 + 1]);",
      "        }",
      "    }",
      "",
      "public:",
      "    SegmentTree(const vector<int>& a) : n(a.size()), tree(4 * n, identity()) {",
      "        build(a, 1, 0, n - 1);",
      "    }",
      "",
      "    void update(int v, int tl, int tr, int pos, int val) {",
      "        if (tl == tr) {",
      "            tree[v] = val;",
      "        } else {",
      "            int tm = (tl + tr) / 2;",
      "            if (pos <= tm)",
      "                update(v * 2, tl, tm, pos, val);",
      "            else",
      "                update(v * 2 + 1, tm + 1, tr, pos, val);",
      "            tree[v] = combine(tree[v * 2], tree[v * 2 + 1]);",
      "        }",
      "    }",
      "",
      "    int query(int v, int tl, int tr, int l, int r) {",
      "        if (l > r) return identity();",
      "        if (l == tl && r == tr) return tree[v];",
      "        int tm = (tl + tr) / 2;",
      "        return combine(",
      "            query(v * 2, tl, tm, l, min(r, tm)),",
      "            query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r)",
      "        );",
      "    }",
      "};"
    ],
    "description": "Segment tree with private identity() and combine(), build() called in constructor"
  },
  "Cout": {
    "prefix": "co",
    "body": ["cout << $0;"],
    "description": "Cout snippet"
  },
  "Cin": {
    "prefix": "ci",
    "body": ["cin >> $0;"],
    "description": "Cin snippet"
  },
  "Array of Size N": {
    "prefix": "arrn",
    "body": [
      "vector<int> ${1:a}(${2:n});",
      "",
      "for (int i = 0; i < ${2}; i++)",
      "  cin >> ${1}[i];"
    ],
    "description": "Array of size N"
  },
  "Sieve of Eratosthenes": {
    "prefix": "sieve",
    "body": [
      "function sieve(int n) {",
      "  vector<bool> is_prime(n + 1, true);",
      "  is_prime[0] = is_prime[1] = false;",
      "",
      "  for (int i = 2; i <= n; i++) {",
      "    if (!is_prime[i] || i*i > n) continue;",
      "",
      "    for (int j = i*i; j <= n; j += i) is_prime[j] = false;",
      "  }",
      "}"
    ],
    "description": "Algorithm to compute all the prime numbers up to n"
  },
  "Binary Exponentiation": {
    "prefix": "binexp",
    "body": [
      "int binexp(int n, int k, int m) {",
      "  int res = 1 % m;",
      "  n %= m;",
      "",
      "  while (k > 0) {",
      "    if (k & 1)",
      "      res = (res * n) % m;",
      "",
      "    n = (n * n) % m;",
      "    k >>= 1;",
      "  }",
      "",
      "  return res;",
      "}"
    ],
    "description": "Binary Exponentiation / Fast Exponentiation"
  },
  "Modulo": {
    "prefix": "mod",
    "body": ["int mod(int a, int b) {", "  return (a % b + b) % b;", "}"],
    "description": "Modulo function"
  },
  "Iterative Pow": {
    "prefix": "poww",
    "body": [
      "int poww(int a, int b) {",
      "  int ans = 1;",
      "",
      "  while (b--) ans *= a;",
      "",
      "  return ans;",
      "}"
    ],
    "description": "Iterative version of pow"
  },
  "Binary Lifting": {
    "prefix": "binlift",
    "body": [
      "vector<vector<int>> up",
      "vector<int> depth;",
      "",
      "void binlift(int u, int p) {",
      "  up[u][0] = p;",
      "",
      "  for (int j = 1; j < LOG; j++) {",
      "    if (up[u][j - 1] != -1) up[u][j] = up[up[u][j - 1]][j - 1];",
      "    else up[u][j] = -1;",
      "  }",
      "",
      "  for (int v : adj[u]) {",
      "    if (v == p) continue;",
      "",
      "    depth[v] = depth[u] + 1;",
      "    binlift(v, u);",
      "  }",
      "}"
    ],
    "description": "Binary Lifting Template"
  },
  "LCA": {
    "prefix": "lca",
    "body": [
      "int lca(int u, int v) {",
      "  if (depth[u] < depth[v]) swap(u, v);",
      "",
      "  int diff = depth[u] - depth[v];",
      "",
      "  for (int j = 0; j < LOG; j++) {",
      "    if ((diff >> j) & 1) v = up[v][j];",
      "  }",
      "",
      "  if (u == v) return u;",
      "",
      "  for (int j = LOG - 1; j >= 0; j--) {",
      "    if (up[u][j] != -1 && up[u][j] != up[v][j]) {",
      "      u = up[u][j];",
      "      v = up[v][j];",
      "    }",
      "  }",
      "",
      "  return up[u][0];",
      "}"
    ],
    "description": "LCA funciton"
  },
  "Variable": {
    "prefix": "var",
    "body": ["${2:int} ${1:n};", "cin >> ${1};"],
    "description": "Variable snippet"
  }
}
